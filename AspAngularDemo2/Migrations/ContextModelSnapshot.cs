// <auto-generated />
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.Models.Author", b =>
                {
                    b.Property<int>("IdAuthor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAuthor"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("IdAuthor")
                        .HasName("Author_pk");

                    b.ToTable("Author", (string)null);

                    b.HasData(
                        new
                        {
                            IdAuthor = 1,
                            FirstName = "Stephen",
                            LastName = "King"
                        });
                });

            modelBuilder.Entity("Backend.Models.AuthorBook", b =>
                {
                    b.Property<int>("IdAuthor")
                        .HasColumnType("int");

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.HasKey("IdAuthor", "IdBook")
                        .HasName("AuthorBook_pk");

                    b.HasIndex("IdBook");

                    b.ToTable("Author_Book", (string)null);

                    b.HasData(
                        new
                        {
                            IdAuthor = 1,
                            IdBook = 1
                        });
                });

            modelBuilder.Entity("Backend.Models.Book", b =>
                {
                    b.Property<int>("IdBook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBook"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("IdBook")
                        .HasName("Book_pk");

                    b.ToTable("Book", (string)null);

                    b.HasData(
                        new
                        {
                            IdBook = 1,
                            Title = "Misery"
                        });
                });

            modelBuilder.Entity("Backend.Models.AuthorBook", b =>
                {
                    b.HasOne("Backend.Models.Author", "IdAuthorNavigation")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("IdAuthor")
                        .IsRequired()
                        .HasConstraintName("Author_AuthorBook");

                    b.HasOne("Backend.Models.Book", "IdBookNavigation")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("IdBook")
                        .IsRequired()
                        .HasConstraintName("Book_AuthorBook");

                    b.Navigation("IdAuthorNavigation");

                    b.Navigation("IdBookNavigation");
                });

            modelBuilder.Entity("Backend.Models.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("Backend.Models.Book", b =>
                {
                    b.Navigation("AuthorBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
